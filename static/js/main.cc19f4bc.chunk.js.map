{"version":3,"sources":["components/square/index.js","components/square/square.js","components/grid/grid.js","components/status/index.js","components/status/status.js","components/app/initstate.js","components/app/index.js","components/app/app.js","index.js"],"names":["Square","state","blink","onBlockedClick","setState","timerID","setInterval","blinkSquare","this","clearInterval","props","key","sign","onMakeMove","canMove","paintWinner","classNames","signCode","square","SIGN_CODES","className","onClick","String","fromCharCode","Component","Grid","gridData","status","winnerCombo","elements","map","item","squareProps","endsWith","find","element","Status","initState","currentMove","App","checkWin","winningCombos","i","length","a","b","c","console","log","checkDraw","makeMove","idx","findIndex","el","newGridData","nextMove","restartGame","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc19f4bc.chunk.js","sourcesContent":["import Square from './square'\r\nexport default Square\r\n","import React, { Component } from 'react'\r\nimport './square.css'\r\n\r\nexport default class Square extends Component {\r\n\r\n    state = {\r\n        blink: false\r\n    }\r\n    onBlockedClick = () => {\r\n        this.setState({ blink: true })\r\n        this.timerID = setInterval(\r\n            () => this.blinkSquare(),\r\n            50)\r\n    }\r\n\r\n\r\n    blinkSquare() {\r\n        this.setState({\r\n            blink: false\r\n        });\r\n        clearInterval(this.timerID);\r\n    }\r\n    render() {\r\n        const { key, sign, onMakeMove, canMove, paintWinner } = this.props;\r\n        const { blink } = this.state\r\n\r\n        let classNames = (blink) ? 'square square-invalid-move ' : 'square'\r\n        if (paintWinner) classNames += ' square-win'\r\n\r\n        const SIGN_CODES = {\r\n            X: 10005,\r\n            O: 9711,\r\n            EMPTY: 8203\r\n        };\r\n        let signCode;\r\n        switch (sign) {\r\n            case 'X':\r\n                signCode = SIGN_CODES.X\r\n                break;\r\n            case 'O':\r\n                signCode = SIGN_CODES.O\r\n                break;\r\n            case '':\r\n                signCode = SIGN_CODES.EMPTY\r\n                break;\r\n            default:\r\n                signCode = SIGN_CODES.EMPTY\r\n        }\r\n        let square;\r\n        if (canMove) {\r\n            square = <div className={classNames} key={key} onClick={onMakeMove}>{String.fromCharCode(signCode)} </div>\r\n        }\r\n        else {\r\n            square = <div className={classNames} key={key} onClick={this.onBlockedClick}>{String.fromCharCode(signCode)} </div>\r\n        }\r\n        return (\r\n            <>{square}</>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Square from '../square'\r\nimport './grid.css'\r\n\r\nexport default class Grid extends Component {\r\n\r\n    render() {\r\n        const { gridData, onMakeMove, status, winnerCombo } = this.props;\r\n        const elements = gridData.map((item) => {\r\n            const { ...squareProps } = item;\r\n            if (status.endsWith('winner')) {\r\n                squareProps.canMove = false;\r\n            }\r\n            const paintWinner = (typeof winnerCombo.find(element => element === item.key) !== \"undefined\")\r\n\r\n            return <Square {...squareProps} paintWinner={paintWinner} onMakeMove={() => onMakeMove(item.key)} />\r\n        })\r\n\r\n        return (\r\n            <div className='grid'>\r\n                {elements}\r\n            </div>\r\n        )\r\n    }\r\n}","import Status from './status'\r\nexport default Status","import React from 'react';\r\nimport './status.css'\r\n\r\nconst Status = ({ status }) => {\r\n    return (\r\n        <div className=\"status\">Status : <>{status}</></div>\r\n    )\r\n}\r\n\r\nexport default Status;","let initState = {\r\n    gridData: [\r\n        {\r\n            key: 0, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 1, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 2, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 3, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 4, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 5, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 6, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 7, sign: '', canMove: true\r\n        },\r\n        {\r\n            key: 8, sign: '', canMove: true\r\n        }\r\n\r\n    ],\r\n    currentMove: 'X',\r\n    status: `Next move is X`,\r\n    winnerCombo: []\r\n}\r\nexport default initState","import App from './app'\r\nexport default App","import React, { Component } from 'react'\r\nimport Grid from '../grid/grid'\r\nimport Status from '../status'\r\nimport './app.css'\r\nimport initState from './initstate.js'\r\n\r\nexport default class App extends Component {\r\n\r\n    state = initState\r\n\r\n    checkWin = () => {\r\n        const winningCombos = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ];\r\n        this.setState(({ gridData, currentMove }) => {\r\n\r\n            for (let i = 0; i < winningCombos.length; i++) {\r\n\r\n                const [a, b, c] = winningCombos[i];\r\n                console.log(a, b, c)\r\n                if (gridData[a].sign === gridData[b].sign && gridData[b].sign === gridData[c].sign && gridData[a].sign !== '') {\r\n                    return {\r\n                        status: `${gridData[a].sign} is winner`,\r\n                        winnerCombo: [a, b, c]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    checkDraw = () => {\r\n        this.setState(\r\n            ({ gridData }) => {\r\n                if (typeof gridData.find(element => element.sign === '') == 'undefined') {\r\n                    return {\r\n                        status: 'Draw'\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    makeMove = (key) => {\r\n        this.setState(({ gridData, currentMove }) => {\r\n            const idx = gridData.findIndex((el) => el.key === key);\r\n            const newGridData = [...gridData]\r\n            const nextMove = (currentMove === 'X') ? 'O' : 'X'\r\n            newGridData[idx] = {\r\n                key: key,\r\n                sign: currentMove,\r\n                canMove: false\r\n            }\r\n            return {\r\n                gridData: newGridData,\r\n                currentMove: nextMove,\r\n                status: `Next move is ${nextMove}`\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    onMakeMove = (key) => {\r\n        this.makeMove(key);\r\n        this.checkDraw();\r\n        this.checkWin();\r\n\r\n    }\r\n\r\n    restartGame = () => {\r\n        this.setState(() => {\r\n            return initState\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                <Grid {...this.state} onMakeMove={this.onMakeMove} />\r\n                <Status status={this.state.status} />\r\n                <button className=\"btn btn-outline-info flex-container\" onClick={this.restartGame}>Restart</button>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n\nReactDOM.render(\n\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}